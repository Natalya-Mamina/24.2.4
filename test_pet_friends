from api import PetFriends
from settings import valid_email, valid_password
import os

pf = PetFriends()


#class Test:
    #def setup(self):
        #self.pf = PetFriends()

def test_get_API_keyForValidUser(email="natakhol@mail.ru", password="happy2503$"):
    status, result = pf.get_API_key(email, password)
    """Получаем API_key с правильными значениями полей, ожидая код ответа 200, который означает, 
        успешное получение секретного ключа, который можно использовать в заголовке 
        «auth_key» для других методов API."""

    assert status == 200
    assert 'key' in result

    #моё
def test_get_API_key_negative(email = "natakhol@mail.ru", password = "1234"):
    status, result = pf.get_API_key("natakhol@mail.ru", "1234")
    """Получаем API_key с невалидными значениями полей логина/пароля, ожидая код ответа 403, который означает, 
            что указанная комбинация адреса электронной почты пользователя и пароля неверна."""

    assert status == 403
    assert 'key' not in result

def test_getAllPetsWithValidKey(filter=''):  # filter available values : my_pets
    _, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")
    status, result = pf.get_list_of_pets(auth_key, filter)
    """Получаем список добавленных на сайт питомцев, указывая верные значениями полей логина и пароля, 
    ожидая код ответа 200, который означает, успешный вывод списка доступных питомцев из базы данных в формате JSON."""
    assert status == 200
    assert len(result['pets']) > 0

def test_addNewPetWithValidData(name='Мурзик', animal_type='кот', age='3',
                                    pet_photo='images/cat__.jpg'):
    """Добавляем нового питомца с корректными значениями полей и фото, ожидая код ответа 200, который означает,
            что домашнее животное было успешно добавлено в базу данных."""
    _, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")

    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)
    assert status == 200
    assert result['name'] == name

        #моё
def test_addNewPetWithValidData_wrong_name(name='FfffffffffffffffffffffffffffffffffffffffffFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
                                                  animal_type='двортерьер', age='500',
                                                  pet_photo='images/Lemur.jpg'):
    """Добавляем нового питомца со слишком длинным значением поля имени, ожидая код ошибки 400, который означает,
        что предоставленные данные неверны."""
        _, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")

        status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)
        assert status == 400
        assert result['name'] != name

def test_successfulDeleteSelfPet():
    _, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")
    _, myPets = pf.get_list_of_pets(auth_key, "my_pets")
    """Удаляем данные  питомца из базы с верными значениями полей ключа и питомца, ожидая код ответа 200, который означает, 
                что домашнее животное было успешно удалено из базы данных."""
    if len(myPets['pets']) == 0:
        pf.add_new_pet(auth_key, "Суперкот", "кот", "3", "images/cat_.jpg")
        _, myPets = pf.get_list_of_pets(auth_key, "my_pets")

        pet_id = myPets['pets'][0]['id']
        status, _ = pf.delete_pet(auth_key, pet_id)
        _, myPets = pf.get_list_of_pets(auth_key, "my_pets")

        assert status == 200
        assert pet_id not in myPets.values()

def test_successfulUpdateSelfPetInfo(name='Кузя', animal_type='Джунгарик', age=1):
    _, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")
    _, myPets = pf.get_list_of_pets(auth_key, "my_pets")
    """Обновляем данные уже добавленного питомца с корректными значениями полей, ожидая код ответа 200, который означает, 
            что домашнее животное было успешно обнавлена в базе данных."""
    if len(myPets['pets']) > 0:
        status, result = pf.update_pet_info(auth_key, myPets['pets'][0]['id'], name, animal_type, age)
        assert status == 200
        assert result['name'] == name
    else:
        raise Exception("There is no my pets")

def test_wrong_UpdateSelfPetInfo(name='', animal_type='Человек', age=239):
    _, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")
    _, myPets = pf.get_list_of_pets(auth_key, "my_pets")
    """Обновляем данные уже добавленного питомца с пустым значением, ожидая код ошибки 400, который означает, 
            который означает, что предоставленные данные неверны."""
    if len(myPets['pets']) > 0:
        status, result = pf.update_pet_info(auth_key, myPets['pets'][0]['id'], name, animal_type, age)
        assert status == 400
        assert result['name'] == name
    else:
        raise Exception("There is no my pets")

#def test_AddPhotoOfPet(pet_photo = 'images/cat_.jpg'):
    #_, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")
    #_, myPets = pf.get_list_of_pets(auth_key, "my_pets")
    #pet_id = myPets['pets'][0]['id']

    #status, result = pf.add_photo_of_pets(auth_key, pet_id, pet_photo)
    #assert status == 200
    #assert "pet_photo" in result

def test_successful_Add_information_about_new_pet_without_photo(name = "Мурка", animal_type ="кошка", age = "5"):
    _, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")
    """Добавляем нового питомца с корректными значениями полей, ожидая код ответа 200, который означает, 
        что домашнее животное было успешно добавлено в базу данных."""
    status, result = pf.add_information_about_new_pet_without_photo(auth_key, name, animal_type, age)
    assert status == 200
    assert result['name'] == name

def test_wrong_Add_information_about_new_pet_without_photo(name = "", animal_type ="", age = ""):
    _, auth_key = pf.get_API_key("natakhol@mail.ru", "happy2503$")
    """Добавляем нового питомца с пустыми значениями полей, ожидая код ошибки 400, который означает, 
    что предоставленные данные неверны."""

    status, result = pf.add_information_about_new_pet_without_photo(auth_key, name, animal_type, age)
    assert status == 400
    assert result['name'] == name
